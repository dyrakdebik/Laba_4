#include <io.h> // для функции _setmode
#include <iostream>
#include <cctype>
#include <cstring>
#define _CRT_SECURE_NO_WARNINGS 1
using namespace std;
const int LEN = 100, DAYS = 7; // Для массивов
char sb = '0'; // Для хранения ненужных символов
////////////////////////////////  Для задания №2  ///////////////////////////////////////////////////
class String {//user-defined string type
private:
	char* str; //pointer to string
public:
	String(const char* s) {
		int dlina = strlen(s); //находим длину строки
		str = new char[dlina + 1]; // выделяем под нее память
		strcpy(str, s); // и копируем строку
	}
	~String() {
		delete[] str; // освобождаем память
	}
	void display() const {
		cout << str; //выводим строку
	}
	void upit() {
		int dlina = strlen(str);
		for (int i = 0; i < dlina; i++)
			*(str + i) = towupper(*(str + i)); // переводим каждый символ строки в верхний регистр
	}
};
////////////////////////////////  Для задания №3  ///////////////////////////////////////////////////
void order(const char**, const char**); // прототип функции сортировки двух элементов массива
void bsort(const char** ptr, int n) {
	for (int i = 0; i < n - 1; i++)
		for (int j = i + 1; j < n; j++)
			order(ptr + i, ptr + j);     // упорядочим два выбранных элемента
}
void order(const char** s1, const char** s2) {
	if (strcmp(*s1, *s2) > 0) { // если первая строка больше второй, то меняем их местами
		const char* temp = *s1;
		*s1 = *s2;
		*s2 = temp;
	}
}
////////////////////////////////  Для задания №4/8  ///////////////////////////////////////////////////
struct link {
	int data;   // данные
	link* next; // указатель на следующий элемент списка
};
class linklist {
private:
	link* first;          // указатель на первый элемент списка
public:
	linklist() {
		first = NULL; // первого элемента нет
	}
	void additem(int d);	// добавление в список для №4
	void additem1(int d);  // добавление в список для №8
	void display();       // вывод на экран
};
void linklist::additem(int d) {
	link* newlink = new link; // выделяем память под новый элемент списка
	newlink->data = d;        // сохраняем в него данные
	newlink->next = first;    // указатель на следующий элемент списка теперь будет указывать на тот, который был первым до этого
	first = newlink;          // первым теперь стал только что созданный элемент, это значит что элементы будут доваляться в начало списка
}
void linklist::additem1(int d) {
	link* newlink = new link; // выделяем память под новый элемент списка
	newlink->data = d;        // сохраняем в него данные
	newlink->next = NULL;     // новый элемент — последний в списке

	// нужно найти конец списка
	if (first) { // если список не пустой
		link* current = first;
		while (current->next)
			current = current->next;
		current->next = newlink;     // вставляем в конец списка новый элемент
	}
	else
		first = newlink;             // иначе вставляем новый элемент первым
}

void linklist::display() // вывод на экран данных из всех элементов списка
{
	link* current = first;
	while (current) {
		wcout << current->data << endl; // выводим данные
		current = current->next;        // переходим к следующему элементу
	}
}
////////////////////////////////  Для задания №5  ///////////////////////////////////////////////////
void addarrays(float* arrraz, float* arrdva, float* arrtri, int kolvo) { // складывает элементы первых двух массивов 
	for (int i = 0; i < kolvo; i++)
		*(arrtri + i) = *(arrraz + i) + *(arrdva + i);
}
void display(float* a, int kolvo) { // вывод элементов массива
	for (int i = 0; i < kolvo; i++)
		cout << *(a + i) << ((i != kolvo - 1) ? ", " : "");
}
////////////////////////////////  Для задания №6  ///////////////////////////////////////////////////
int compstr(const char* s1, const char* s2) // сравниваются две строки и...
												  // если первая строка больше второй выдает - 1
												  // если первая строка меньше второй выдает - -1
												  // если первая строка равна второй выдает - 0
{
	while (*s1 && *s2) { // сравнивает символы пока не проверит все у обеих строк
		if (*s1 > *s2)
			return 1;
		else if (*s1 < *s2)
			return -1;
		s1++; s2++; // идем к след. символам
	}
	if (!*s1 && !*s2)       // если строки по длине равны и их символы совпадают
		return 0;
	else if (!*s1)          // если первая строка короче, а посимвольно строки совпадают,
		return -1;
	else                    // если вторая строка короче, а посимвольно строки совпадают,
		return 1;
}
////////////////////////////////  Для задания №7  ///////////////////////////////////////////////////
class person {
protected:
	string name;
	float salary;
public:
	void setData() {
		cout << "Введите имя - "; 
		cin >> name;
		cout << "Введите зарплату - "; 
		cin >> salary;
	}
	void printData() {
		cout << endl << name;
		cout << endl << salary;
	}
	string getName() {
		return name;
	}
	float getSalary() {
		return salary;
	}
};
void salsort(person** pp, int n) {
	for (int i = 0; i < n - 1; i++)
		for (int j = i + 1; j < n; j++)
			if ((*(pp + i))->getSalary() > (*(pp + j))->getSalary()) { // если первый зарплата больше второй
				person* ptr0 = *(pp + i); // то меняем указатели на них местами в массиве указателей
				*(pp + i) = *(pp + j);
				*(pp + j) = ptr0;
			}
}
////////////////////////////////  Для задания #11  ///////////////////////////////////////////////////
class narrays {
private:
	const int NUMARRAYS; // количество массивов
	const int MAXSIZE;   // количество элементов
	int** ap;            // указатель на массив указателей на отдельные массивы типа int
public:
	narrays(int na, int ms) : NUMARRAYS(na), MAXSIZE(ms) {
		ap = new int* [NUMARRAYS]; // выделим память под массив указателей на отдельные массивы
		for (int j = 0; j < NUMARRAYS; j++) // выделим память под нужное количество отдельных массивов нужного размера
			*(ap + j) = new int[MAXSIZE];
	}
	~narrays() { // освобождаем память
		for (int j = 0; j < NUMARRAYS; j++)
			delete[] * (ap + j);
		delete[] ap;
	}
	int& operator[] (int n) { // перегрузка операции индексации
		int j = n / MAXSIZE; // номер отдельного массива
		int k = n % MAXSIZE; // индекс элемента
		return *(*(ap + j) + k);
	}
};
////////////////////////////////  Для задания №12  ///////////////////////////////////////////////////
// для типа float
const int fm_SIZE = 100; // размер памяти
float fmemory[fm_SIZE];  // массив, представляющий часть памяти компьютера
int fmem_top = 0;        // следующее свободное место
// для адресов
const int pm_SIZE = 100; // размер памяти
int pmemory[pm_SIZE];    // массив, представляющий часть памяти компьютера
int pmem_top = 0;        // следующее свободное место
class Float { // класс, моделирующий переменную типа float
private:
	int addr; // адрес в памяти, по которому хранится значение переменной
public:
	Float(float value) {
		fmemory[fmem_top] = value; // сохраняем значение переменной
		addr = fmem_top;           // запоминаем адрес переменной
		fmem_top++;
	}
	int operator& () const { // перегрузка операции & получения адреса переменной в памяти
		return addr;
	}
};
class ptrFloat // класс, моделирующий указатель на значение типа float
{
private:
	int addr;
public:
	ptrFloat(int value) {  // конструктор с одним аргументом
		pmemory[pmem_top] = value; // сохраняем значение указателя
		addr = pmem_top;           // запоминаем адрес указателя
		pmem_top++;
	}
	float& operator* () const { // перегрузка операции * разыменования указателя
		return fmemory[pmemory[addr]];
	}
};
/// ////////////////////////////////////////////////////////////////////////////
int main() {
	setlocale(0, "");
	int zadanie;
	char da;
	const int MAXSIZE = 10; // количество элементов в массиве
	const int NUMARRAYS = 10; // количество массивов
	cout << "Введите номер задания - ";
	cin >> zadanie;
	if (zadanie == 1) {
		int kolv, j;
		float* ptr; // указатель на массив
		float sum = 0;  // сумма чисел
		cout << "Введите количество чисел - ";
		cin >> kolv;
		ptr = new float[kolv]; // выделяем память для массива на основе введенного количества чисел
		cout << "Введите ваши числа - " << endl;
		for (j = 0; j < kolv; j++) {
			cout << j + 1 << ". ";
			cin >> *(ptr + j);
		}
		for (j = 0; j < kolv; j++)
			sum += *(ptr + j); // считаем общую сумму всех чисел
		cout << "Среднее арифметическое: " << sum / kolv << endl; // считаем и выводим сред.арифметическое
	}
	else if (zadanie == 2) {
		String s1 = "He who laughs last laughs best.";
		cout << "Оригинал - ";
		s1.display();
		s1.upit();
		cout << endl << "В верхнем регистре - ";
		s1.display();
	}
	else if (zadanie == 3) {
		const char* arrptrs[DAYS] = {
			"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
		};
		cout << "\nUnsorted:\n";
		bsort(arrptrs, DAYS);
		for (int i = 0; i < DAYS; i++)
			cout << *(arrptrs + i) << endl;
	}
	else if (zadanie == 4) {
		linklist li;    // создаем связный список

		li.additem(25); // добавляем элементы
		li.additem(36);
		li.additem(49);
		li.additem(64);
		li.display();   // выводим весь список
	}
	else if (zadanie == 5) {
		const int kolvo = 5;
		float arrraz[kolvo] = { 1.5, 2.5, 3.5, 4.5, 1 }, arrdva[kolvo] = { 0.5, 5.5, 1.5, 3.5, 2 }, arrtri[kolvo];
		addarrays(arrraz, arrdva, arrtri, kolvo);
		cout << "Массив 1 - ";
		display(arrraz, kolvo);
		cout << endl << "Массив 2 - ";
		display(arrdva, kolvo);
		cout << endl << "Массив 3 (сумма) - ";
		display(arrtri, kolvo);
	}
	else if (zadanie == 6) {
		char s1[100], s2[100];
		for (;;) {
			cout << "Введите первую строку - ";
			cin >> s1;
			cout << "Введите вторую строку - ";
			cin >> s2;
			switch (compstr(s1, s2)) {
			case -1: cout << "Первая строка идет по алфавиту раньше (-1) \n";
				break;
			case 0: cout << "Строки равны (0) \n";
				break;
			case 1: cout << "Вторая строка идет по алфавиту раньше (1) \n";
				break;
			}
			cout << "Продолжить? (d/n): ";
			cin >> da;
			if (da == 'n') {
				break;
			}
		}
	}
	else if (zadanie == 7) {
		void salsort(person**, int); // прототип функции сортировки
		person* persPtr[100];   // массив указателей на объекты класса
		int n = 0;
		do { // создаем список объектов
			persPtr[n] = new person;             // создаем новый объект
			cout << "Сотрудник " << n+1 << endl;
			persPtr[n]->setData();               // получаем от пользователя данные человека
			n++;
			cout << "Продолжаем ввод (d/n)? ";
			cin >> da;
		} while (da == 'd');

		cout << endl << "Неотсортированный список - "; 
		for (int i = 0; i < n; i++) {                
			cout << endl << "Сотрудник " << i+1;
			(*(persPtr + i))->printData(); // выведем полученный список
		}
		cout << endl;
		salsort(persPtr, n); // отсортируем указатели на объекты класса person в массиве указателей persPtr

		cout << endl << "Отсортированный список:";   // выведем список после сортировки
		for (int i = 0; i < n; i++)  {
			cout << endl << "Сотрудник " << i+1;
			(*(persPtr + i))->printData();
		}
	}
	else if (zadanie == 8) {
		linklist li;
		li.additem1(25); // добавляем элементы
		li.additem1(36);
		li.additem1(49);
		li.additem1(64);
		li.display();
	}

	else if (zadanie == 9) {
		int a0[10], a1[10], a2[10], a3[10], a4[10], a5[10], a6[10], a7[10], a8[10], a9[10]; // массивы
		int* ap[] = { a0, a1, a2, a3, a4, a5, a6, a7, a8, a9 }; // массив указателей на массивы
		int j, k;
		// заполняем массивы
		for (j = 0; j < 10; j++)
			for (k = 0; k < 10; k++)
				ap[j][k] = (j * 10 + k) * 10;
		// выводим данные
		for (j = 0; j < 10; j++)
			for (k = 0; k < 10; k++)
				cout << ap[j][k] << ((k == 10 - 1) ? '\n' : ' ');
	}
	else if (zadanie == 10) {
		int j, k;
		int* ap[NUMARRAYS]; // массив указателей на массивы
		// определим нужное количество массивов нужного размера
		for (j = 0; j < NUMARRAYS; j++)
			*(ap + j) = new int[MAXSIZE];
		// заполняем массивы
		for (j = 0; j < NUMARRAYS; j++)
			for (k = 0; k < MAXSIZE; k++)
				*(*(ap + j) + k) = (j * 10 + k) * 10;
		// выводим данные
		for (j = 0; j < NUMARRAYS; j++)
			for (k = 0; k < MAXSIZE; k++)
				cout << *(*(ap + j) + k) << ((k == MAXSIZE - 1) ? '\n' : ' ');
	}
	else if (zadanie == 11) {
		int kolvoarr;  // количество отдельных массивов
		int sizearr; // количество элементов в каждом из отдельных массивов
		cout << "Введите количество массивов - "; 
		cin >> kolvoarr;
		cout << "Введите количество элементов в каждом из массивов - "; 
		cin >> sizearr;
		cout << endl;
		narrays arr(kolvoarr, sizearr); // массив, объединяющий отдельные массивы в одно целое
		// заполняем этот массив
		for (int i = 0; i < kolvoarr * sizearr; i++)
			arr[i] = i * 10;
		// выводим данные из этого массива
		for (int i = 0; i < kolvoarr * sizearr; i++)
			cout << arr[i] << ((i % sizearr == sizearr - 1) ? '\n' : ' ');
	}
	else if (zadanie == 12) {
		Float var1 = 1.234; // определяем и инициализируем переменные
		Float var2 = 5.678;
		ptrFloat ptr1 = &var1; // определяем и инициализируем указатели
		ptrFloat ptr2 = &var2;
		cout << "*ptr1 = " << *ptr1 << endl; // получаем значения переменных и выводим на экран
		cout << "*ptr2 = " << *ptr2 << endl << endl;
		*ptr1 = 7.123; // присваиваем новые значения переменным, адресованным через указатели
		*ptr2 = 8.456;
		cout << "*ptr1 = " << *ptr1 << endl; // снова получаем значения и выводим на экран
		cout << "*ptr2 = " << *ptr2 << endl;
	}
}
