#include <iostream>
#include <iomanip> 
#include <cstring> 
#define _CRT_SECURE_NO_WARNINGS 1
using namespace std;
const int LEN = 80, LIMIT = 100;
/// ///////////////////////////////1,3,4 и триллион после ZADANIE/////////////////////////////
class publication {
protected:
	string title;
	float price;
public:
	void getPubl() {
		cout << "Введите тайтл - ";
		cin >> title;
		cout << "Введите прайс - ";
		cin >> price;
	}
	void putPubl() const {
		cout << endl << "Тайтл - " << title << endl << "Прайс - " << price;
	}
};
class publication2 : public publication {
protected:
	string data;
public:
	void getData() {
		getPubl();
		cout << "Введите дату выхода книги - ";
		cin >> data;
	}
	void putData() {
		putPubl();
		cout << "\nДата выхода книги - " << data;
	}
};
////////
class sales {
protected:
	enum { months = 3 };
	float salesArr[months];
public:
	void getSale();
	void putSale() const;
};
//----------------------
void sales::getSale() {
	cout << "Введите sales за 3 месяца\n";
	for (int j = 0; j < months; j++) {
		cout << "   month" << j + 1 << ": ";
		cin >> salesArr[j];
	}
}
//----------------------
void sales::putSale() const {
	for (int j = 0; j < months; j++) {
		cout << "\n Sales for month " << j + 1 << ": "; 
		cout << salesArr[j];
	}
}

/// ////////////////////////////
class book : public publication2, public sales{
protected:
	int pages;
public:
	void getBook() {
		publication2::getData();
		cout << "Введите кол-во страниц - ";
		cin >> pages;
		//sales::getSale();
	}
	void putBook() {
		publication2::putData();
		cout << "\nСтраницы - " << pages;
		//sales::putSale();
	}
};
////////
class tape : public publication2, public sales {
protected:
	float time;
public:
	void getTape() {
		publication2::getData();
		cout << "Введите время книги в минутах - ";
		cin >> time;
		//sales::getSale();
	}
	void putTape() {
		publication2::putData();
		cout << "\nВремя в минутах - " << time;
		//sales::putSale();
	}
};
class disk : public publication, public sales {
protected:
	enum diskk {CD, DVD};
	diskk tp;
public:
	void getDisk() {
		publication::getPubl();
		char dk;
		cout << "Выберите тип диска (c/d)";
		cin >> dk;
		switch (dk) {
		case 'c':
			tp = CD;
			break;
		case 'd':
			tp = DVD;
			break;
		default:
			cout << "Не бывает такого";
		}
		sales::getSale();
	}
	void putDisk() const {
		publication::putPubl();
		switch (tp) {
		case CD:
			cout << "\nТип диска - CD";
			break;
		case DVD:
			cout << "\nТип диска - DVD";
			break;
		}
		sales::putSale();
	}
};
/// ///////////////////////////////2/8 ZADANIE/////////////////////////////
class String {
protected:
	static const int SZ = 80;
	char str[SZ];
public:
	String() { str[0] = '\0'; }
	String(char s[]) { 
		strcpy(str, s);
	}
	void display() const {
		cout << str;
	}
	operator char* () {
		return str;
	}
};
/////////
class Pstring : public String {
public:
	Pstring(char s[]);
};
///////
Pstring::Pstring(char s[]) {
	if (strlen(s) > SZ - 1) {
		for (int j = 0; j < SZ - 1; j++)
			str[j] = s[j];
		str[SZ-1] = '\0';
	}
	else
		String(s);
}
///////
class Pstring2 : public Pstring {
public:
	string left(unsigned int amount)
	{
		string temp = "";
		for (int i = 0; i < amount; i++)
		{
			temp += str[i];
		}
		return temp;
	}
	string right(unsigned int amount)
	{
		string temp = "";
		int len = strlen(str);
		for (int i = len - amount; i < len; i++) {
			temp += str[i];
		}
		return temp;
	}
	string mid(unsigned int amount, unsigned int elementary)
	{
		string temp = "";
		for (int i = elementary - 1; i < elementary - 1 + amount; i++) {
			temp += str[i];
		}
		return temp;
	}
};
/// ///////////////////////////////5 ZADANIE/////////////////////////////
class employee0 {
private: 
	char name[LEN];
	unsigned long number;
public: 
	void getdata() {
	cout << "\n Enter last name: "; 
	cin >> name;
	cout << " Enter number: "; 
	cin >> number;
}
	void putdata() const {
		cout << "\n Name: " << name;
		cout << "\n Number: " << number;
	}
};
class employee2 : private employee0 {
private:
	double compensation;
	enum period {hour, mond, month};
	period opl;
public:
	void getdata() {
		char per;
		cout << "Введите компенсацию - ";
		cin >> compensation;
		cout << "Введите период - (h-почасовая, m - по понедельникам, e - ежемесячно)";
		cin >> per;
		switch (per) {
		case 'h':
			opl = hour;
			break;
		case 'm':
			opl = mond;
			break;
		case 'e':
			opl = month;
			break;
		default:
			cout << "Для кого я пишу буквы?";
			break;
		}
	}
	void putdata() {
		cout << "Зарплата - " << compensation << endl;
		cout << "Период оплаты - ";
		switch (opl) {
		case hour:
			cout << "Почасовая";
			break;
		case mond:
			cout << "Еженедельная";
			break;
		case month:
			cout << "Ежемесячная";
			break;
		}
	}

};
/// ///////////////////////////////6 ZADANIE/////////////////////////////
class safearay {
private:
	int arr[LIMIT];
public:
	int& operator [](int n) {
		if (n < 0 || n >= LIMIT) {
			cout << "\nIndex out of bounds"; 
			exit(1);
		}
		return arr[n];
	}
};
class safegran : public safearay {
private:
	int granniz, granvverh, a=0;
public:
	safegran(int niz, int vverh) : granniz(niz), granvverh(vverh) {
		if (granniz > granvverh) {
			a = granniz;
			granniz = granvverh;
			granvverh = a;
		}
	}
	int& operator[] (int n) {
		if (n < granniz || n > granvverh) {
			cout << "Ошибка";
			exit(1);
		}
		return safearay::operator[] (n - granniz);
	}
};
/// ///////////////////////////////7 ZADANIE/////////////////////////////
class Counter {
protected:
	unsigned int count;
public:
	Counter() : count(0) {}
	Counter(int c) : count(c) {}
	unsigned int get_count() const {
		return count;
	}
	Counter operator ++ () {
		return Counter(++count);
	}
	Counter operator ++ (int) {
		return Counter(++count);
	}
};
/// ////-----------------------------------------------------------
class CountDn : public Counter
{
public:
	CountDn() : Counter() {}
	CountDn(int c) : Counter(c) {}
	CountDn operator -- () {
		return CountDn(--count);
	}
	CountDn operator -- (int) {
		return CountDn(--count);
	}
};
/// ///////////////////////////////10 ZADANIE/////////////////////////////
class student { 
private: 
    char school[LEN];
    char degree[LEN]; 
public: 
void getedu() { 
    cout << " Enter name of school or university: ";
    cin >> school; 
    cout << " Enter highest degree earned \n"; 
    cout << " (Highschool, Bachelor's, Master's, PhD): "; 
    cin >> degree; } 
void putedu() const { 
    cout << "\n School or university: " << school; 
    cout << "\n Highest degree earned: " << degree; 
 } 
 }; 
//////////////////////////////////////////////////////////////// 
class employee { 
private: 
    char name[LEN]; 
    unsigned long number;
public: 
void getEmpl() { 
    cout << "\n Enter last name: ";
    cin >> name; 
    cout << " Enter number: ";
    cin >> number; 
 } 
 void putEmpl() const { 
     cout << "\n Name: " << name; 
     cout << "\n Number: " << number; 
 } 
 }; 
//////////////////////////////////////////////////////////////// 
class manager : private employee, private student{ 
    private: 
    char title[LEN]; //"vicepresident" etc. 
    double dues; //golf club dues 
public: 
void getManag() { 
    employee::getEmpl(); 
    cout << " Enter title: ";
    cin >> title; 
    cout << " Enter golf club dues: ";
    cin >> dues; 
    student::getedu(); 
} 
 void putManag() const { 
     employee::putEmpl(); 
     cout << "\n Title: " << title; 
     cout << "\n Golf club dues: " << dues; 
     student::putedu(); 
 } 
 }; 
 //---------
 class executive : private manager {
     protected:
     double prem, akcio;
     public:
    void getExec() {
         manager::getManag();
         cout << "Введите размер премии - ";
         cin >> prem;
         cout << "Введите кол-во акций - ";
         cin >> akcio;
    }
    void putExec() {
         manager::putManag();
         cout << "\nПремия - " << prem << endl << "Количество акций - " << akcio;
    }
 };
//////////////////////////////////////////////////////////////// 
class scientist : private employee, private student { 
private: 
    int pubs; 
//number of publications 
public: 
void getScien() { 
    employee::getEmpl(); 
    cout << " Enter number of pubs: "; 
    cin >> pubs; 
    student::getedu(); 
    
} 
void putScien() const { 
    employee::putEmpl(); 
    cout << "\n Number of publications: " << pubs; 
    student::putedu(); 
} 
}; 
/// ///////////////////////////////11 ZADANIE/////////////////////////////
struct pair {
    int x,y;
};
class stack {
  protected:
  
};
/// ///////////////////////////////12 ZADANIE/////////////////////////////
int main() {
	setlocale(0, "");
	int zadanie;
	cout << "Введите номер задания - ";
	cin >> zadanie;
	if (zadanie == 4) {
		disk disk1;
		disk1.getDisk();
		disk1.putDisk();
	}
	else if (zadanie == 5) {
		employee0 e0;
		employee2 e1;
		e0.getdata();
		e1.getdata();
		e0.putdata();
		e1.putdata();
	}
	else if (zadanie == 6) {
		int niz, vverh;
		cout << "Введите нижнюю границу - ";
		cin >> niz;
		cout << "Введите вверхнюю границу - ";
		cin >> vverh;
		safegran arr(niz, vverh);
		for (int i = niz; i <= vverh; i++) {
			arr[i] = i * 10;
		}
		for (int i = niz; i <= vverh; i++) {
			int otvet=arr[i];
			cout << i << " - " << otvet << endl;
		}
	}
	else if (zadanie == 7) {
		CountDn c1;
		CountDn c2(100);
		cout << "\nc1=" << c1.get_count();
		cout << "\nc2=" << c2.get_count();
		++c1; ++c1; ++c1;
		cout << "\nc1=" << c1.get_count();
		--c2; --c2;
		cout << "\nc2=" << c2.get_count();
		CountDn c3 = --c2;
		cout << "\nc3=" << c3.get_count();
		cout << endl; 
		return 0;
	}
	else if (zadanie == 8) {
		
	}
	else if (zadanie = 9) {
		book b1;
		tape t1;
		b1.getBook();
		t1.getTape();
		b1.putBook();
		t1.putTape();
	}
	else if (zadanie = 10) {
		executive m1; 
		scientist s1, s2; 
		laborer l1; 
		cout << endl; 
		cout << "\nEnter data for manager 1";
		m1.getExec(); 
		cout << "\nEnter data for scientist 1"; 
		s1.getScien(); 
		cout << "\nEnter data for scientist 2"; 
		s2.getScien(); 
		cout << "\nData on manager 1";
		m1.putExec();  
		cout << "\nData on scientist 1"; 
		s1.putScien(); 
		cout << "\nData on scientist 2"; 
		s2.putScien(); 
		cout << endl; 
	}
	else if (zadanie = 11) {
	}
	else if (zadanie = 12) {
	
	}
}
