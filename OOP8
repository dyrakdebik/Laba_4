
#include <iostream>
#include <iomanip> 
#include <cstring> 
#define _CRT_SECURE_NO_WARNINGS 1
using namespace std;
const int LEN = 80, LIMIT = 100;
/// ///////////////////////////////1,3,4 ZADANIE/////////////////////////////
class publication {
protected:
	string title;
	float price;
public:
	void getPubl() {
		cout << "Введите тайтл - ";
		cin >> title;
		cout << "Введите прайс - ";
		cin >> price;
	}
	void putPubl() const {
		cout << endl << "Тайтл - " << title << endl << "Прайс - " << price;
	}
};
class publication2 : public publication {
protected:
	string data;
public:
	void getData() {
		getPubl();
		cout << "Введите дату выхода книги - ";
		cin >> data;
	}
	void putData() {
		putPubl();
		cout << "\nДата выхода книги - " << data;
	}
};
////////
class sales {
protected:
	enum { months = 3 };
	float salesArr[months];
public:
	void getSale();
	void putSale() const;
};
//----------------------
void sales::getSale() {
	cout << "Введите sales за 3 месяца\n";
	for (int j = 0; j < months; j++) {
		cout << "   month" << j + 1 << ": ";
		cin >> salesArr[j];
	}
}
//----------------------
void sales::putSale() const {
	for (int j = 0; j < months; j++) {
		cout << "\n Sales for month " << j + 1 << ": "; 
		cout << salesArr[j];
	}
}

/// ////////////////////////////
class book : public publication2, public sales{
protected:
	int pages;
public:
	void getBook() {
		publication2::getData();
		cout << "Введите кол-во страниц - ";
		cin >> pages;
		//sales::getSale();
	}
	void putBook() {
		publication2::putData();
		cout << "\nСтраницы - " << pages;
		//sales::putSale();
	}
};
////////
class tape : public publication2, public sales {
protected:
	float time;
public:
	void getTape() {
		publication2::getData();
		cout << "Введите время книги в минутах - ";
		cin >> time;
		//sales::getSale();
	}
	void putTape() {
		publication2::putData();
		cout << "\nВремя в минутах - " << time;
		//sales::putSale();
	}
};
class disk : public publication, public sales {
protected:
	enum diskk {CD, DVD};
	diskk tp;
public:
	void getDisk() {
		publication::getPubl();
		char dk;
		cout << "Выберите тип диска (c/d)";
		cin >> dk;
		switch (dk) {
		case 'c':
			tp = CD;
			break;
		case 'd':
			tp = DVD;
			break;
		default:
			cout << "Не бывает такого";
		}
		sales::getSale();
	}
	void putDisk() const {
		publication::putPubl();
		switch (tp) {
		case CD:
			cout << "\nТип диска - CD";
			break;
		case DVD:
			cout << "\nТип диска - DVD";
			break;
		}
		sales::putSale();
	}
};
/// ///////////////////////////////2/8 ZADANIE/////////////////////////////
class String {
protected:
	static const int SZ = 80;
	char str[SZ];
public:
	String() { str[0] = '\0'; }
	String(char s[]) { 
		strcpy_s(str, s);
	}
	void display() const {
		cout << str;
	}
	operator char* () {
		return str;
	}
};
/////////
class Pstring : public String {
public:
	Pstring(char s[]);
};
///////
Pstring::Pstring(char s[]) {
	if (strlen(s) > SZ - 1) {
		for (int j = 0; j < SZ - 1; j++)
			str[j] = s[j];
		str[SZ-1] = '\0';
	}
	else
		String(s);
}
///////
class Pstring2 : public Pstring {
public:
	string left(unsigned int amount)
	{
		string temp = "";
		for (int i = 0; i < amount; i++)
		{
			temp += str[i];
		}
		return temp;
	}
	string right(unsigned int amount)
	{
		string temp = "";
		int len = strlen(str);
		for (int i = len - amount; i < len; i++) {
			temp += str[i];
		}
		return temp;
	}
	string mid(unsigned int amount, unsigned int elementary)
	{
		string temp = "";
		for (int i = elementary - 1; i < elementary - 1 + amount; i++) {
			temp += str[i];
		}
		return temp;
	}
};
/// ///////////////////////////////5 ZADANIE/////////////////////////////
class employee0 {
private: 
	char name[LEN];
	unsigned long number;
public: 
	void getdata() {
	cout << "\n Enter last name: "; 
	cin >> name;
	cout << " Enter number: "; 
	cin >> number;
}
	void putdata() const {
		cout << "\n Name: " << name;
		cout << "\n Number: " << number;
	}
};
class employee2 : private employee0 {
private:
	double compensation;
	enum period {hour, mond, month};
	period opl;
public:
	void getdata() {
		char per;
		cout << "Введите компенсацию - ";
		cin >> compensation;
		cout << "Введите период - (h-почасовая, m - по понедельникам, e - ежемесячно)";
		cin >> per;
		switch (per) {
		case 'h':
			opl = hour;
			break;
		case 'm':
			opl = mond;
			break;
		case 'e':
			opl = month;
			break;
		default:
			cout << "Для кого я пишу буквы?";
			break;
		}
	}
	void putdata() {
		cout << "Зарплата - " << compensation << endl;
		cout << "Период оплаты - ";
		switch (opl) {
		case hour:
			cout << "Почасовая";
			break;
		case mond:
			cout << "Еженедельная";
			break;
		case month:
			cout << "Ежемесячная";
			break;
		}
	}

};
/// ///////////////////////////////6 ZADANIE/////////////////////////////
class safearay {
private:
	int arr[LIMIT];
public:
	int& operator [](int n) {
		if (n < 0 || n >= LIMIT) {
			cout << "\nIndex out of bounds"; 
			exit(1);
		}
		return arr[n];
	}
};
class safegran : public safearay {
private:
	int granniz, granvverh, a=0;
public:
	safegran(int niz, int vverh) : granniz(niz), granvverh(vverh) {
		if (granniz > granvverh) {
			a = granniz;
			granniz = granvverh;
			granvverh = a;
		}
	}
	int& operator[] (int n) {
		if (n < granniz || n > granvverh) {
			cout << "Ошибка";
			exit(1);
		}
		return safearay::operator[] (n - granniz);
	}
};
/// ///////////////////////////////7 ZADANIE/////////////////////////////
class Counter {
protected:
	unsigned int count;
public:
	Counter() : count(0) {}
	Counter(int c) : count(c) {}
	unsigned int get_count() const {
		return count;
	}
	Counter operator ++ () {
		return Counter(++count);
	}
	Counter operator ++ (int) {
		return Counter(++count);
	}
};
/// ////-----------------------------------------------------------
class CountDn : public Counter
{
public:
	CountDn() : Counter() {}
	CountDn(int c) : Counter(c) {}
	CountDn operator -- () {
		return CountDn(--count);
	}
	CountDn operator -- (int) {
		return CountDn(--count);
	}
};
/// ///////////////////////////////10 ZADANIE/////////////////////////////
class Student //educational background
{
private:
	char school[LEN]; // name of school or university
	char degree[LEN]; // highest degree earned
public:
	void getedu()
	{
		cout << " Enter name of school or university: "; cin >> school;
		cout << " Enter highest degree earned \n";
		cout << " (Highschool, Bachelor's, Master's, PhD): "; cin >> degree;
	}
	void putedu() const
	{
		cout << "\n School or university: " << school;
		cout << "\n Highest degree earned: " << degree;
	}
};
class employee
{
private:
	char name[LEN]; //employee name
	unsigned long number; //employee number
public:
	void getdata()
	{
		cout << "\n Enter last name: "; cin >> name;
		cout << " Enter number: "; cin >> number;
	}
	void putdata() const {
		cout << "\n Name: " << name;
		cout << "\n Number: " << number;
	}
};
class Manager : private employee, private Student //management
{
private:
	char title[LEN]; //"vice-president" etc.
	double dues; //golf club dues
public:
	void getdata()
	{
		employee::getdata();
		cout << " Enter title: "; cin >> title;
		cout << " Enter golf club dues: "; cin >> dues;
		Student::getedu();
	}
	void putdata() const
	{
		employee::putdata();
		cout << "\n Title: " << title;
		cout << "\n Golf club dues: " << dues;
		Student::putedu();
	}
};
class Executive : public Manager
{
protected:
	unsigned int bonus, amount;
public:
	void getdata() {
		Manager::getdata();
		cout << " Введите размер годовой премии: "; cin >> bonus;
		cout << " Введите кол-во акций в компании: "; cin >> amount;
	}
	void putdata() const
	{
		Manager::putdata();
		cout << " Размер годовой премии: " << bonus << endl
			<< " Кол-во акций в компании: " << amount << endl;
	}
};
/// ///////////////////////////////11 ZADANIE/////////////////////////////
struct Pair // пара чисел
{
	int x;
	int y;
};

class Stack                   // класс, реализующий стек (базовый класс)
{
protected:                    // ЗАМЕТЬТЕ: не private!
	// enum { MAX = 7 };      // немного нестандартный синтаксис
	static const int MAX = 7; // количество элементов в массиве
							  // (одна константа для всех объектов, статическая)
	int st[MAX];              // стек в виде массива
	int top;                  // вершина стека
public:
	Stack()                   // конструктор
	{
		top = -1;
	}
	void push(int var)        // поместить в стек
	{
		st[++top] = var;
	}
	int pop()                 // взять из стека
	{
		return st[top--];
	}
};

class Stack2 : public Stack   // класс, реализующий стек (производный класс)
{
public:
	void push(int var)        // поместить в стек
	{
		if (top >= MAX - 1)   // если стек полон, то ошибка
		{
			cout << "\nОшибка: стек полон!\n"; exit(1);
		}
		Stack::push(var);     // вызов метода push класса Stack
	}
	int pop()                 // взять из стека
	{
		if (top < 0)          // если стек пуст, то ошибка
		{
			cout << "\nОшибка: стек пуст!\n"; exit(1);
		}
		return Stack::pop();  // вызов метода pop класса Stack
	}
};

// новый класс, реализующий стек, работающий с парой чисел (производный от Stack2)
class pairStack : public Stack2
{
public:
	void push(Pair unit) // поместить в стек блок из двух чисел
	{
		Stack2::push(unit.x); // поместить в стек первое число
		Stack2::push(unit.y); // поместить в стек второе число
	}
	Pair pop()           // взять из стека блок из двух чисел
	{
		Pair temp_unit;
		// извлекаем из стека числа в обратном порядке, так как стек организуется
		// по принципу «последним вошёл, первым вышел»
		temp_unit.y = Stack2::pop(); // берем из стека второе число
		temp_unit.x = Stack2::pop(); // берем из стека первое число
		return temp_unit;
	}
};
/// ///////////////////////////////12 ZADANIE/////////////////////////////
class sterling {
protected:
	long pounds;
	int shillings, pences;
public:
	sterling() : pounds(0), shillings(0), pences(0) {}
	sterling(double df) {
		pounds = df;
		shillings = (df - pounds) * 20;
		pences = round(((df - pounds) * 20 - shillings) * 12);
	}
	sterling(long ps, int s, int p) : pounds(ps), shillings(s), pences(p) {}
	void getSterling() {
		char separator;
		cout << "Введите сумму (фунты, шиллинги и пенсы через точку): £";
		cin >> pounds >> separator >> shillings >> separator >> pences;
	}
	void putSterling() const {
		cout << "£" << pounds << "." << shillings << "." << pences;
	}
	operator double() const {
		return (pounds + shillings / 20.0 + pences / 240.0);
	}
	sterling operator+ (sterling s) const {
		return sterling(double(sterling(pounds, shillings, pences)) + double(s));
	}
	sterling operator- (sterling s) const {
		return sterling(double(sterling(pounds, shillings, pences)) - double(s));
	}
	sterling operator* (double n) const {
		return sterling(double(sterling(pounds, shillings, pences)) * n);
	}
	double operator/ (sterling s) const
	{
		return (double(sterling(pounds, shillings, pences)) / double(s));
	}
	sterling operator/ (double n) const {
		return sterling(double(sterling(pounds, shillings, pences)) / n);
	}
};
class sterfrac : public sterling
{
private:
	int eighths;

	// возможные значения:
	// 0                                    (0/8 пенни)
	// 1 — полуфартинг                      (1/8 пенни)
	// 2 — фартинг                          (2/8 пенни или 1/4 пенни)
	// 3 — фартинг и полуфартинг            (3/8 пенни)
	// 4 — полупенни                        (4/8 пенни или 1/2 пенни)
	// 5 — полупенни и полуфартинг          (5/8 пенни)
	// 6 — полупенни и фартинг              (6/8 пенни или 3/4 пенни)
	// 7 — полупенни, фартинг и полуфартинг (7/8 пенни)

public:
	sterfrac() : sterling(), eighths(0) { }
	sterfrac(double df) {
		pounds = df;
		shillings = (df - pounds) * 20;
		pences = ((df - pounds) * 20 - shillings) * 12;
		eighths = round((((df - pounds) * 20 - shillings) * 12 - pences) * 8);
	}
	sterfrac(long ps, int s, int p, int e) : sterling(ps, s, p), eighths(e) { }
	void getSterling() {
		char separator;
		int num, den; 
		cout << "Введите сумму в формате '£9.19.11-1/4': £";
		cin >> pounds >> separator >> shillings >> separator >> pences
			>> separator >> num >> separator >> den;
		if (den == 2) 
			num = num * 4;
		if (den == 4)
			num = num * 2;
		eighths = num;
	}
	void putSterling() const {
		sterling::putSterling();
		cout << "-";
		switch (eighths) {
		case 2: cout << "1/4"; break;
		case 4: cout << "1/2"; break;
		case 6: cout << "3/4"; break;
		default: cout << eighths << "/8";
		}
	}
	operator double() const {
		return (sterling::operator double() + eighths / 1920.0);
	}
	sterfrac operator+ (sterfrac s) const {
		return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) + double(s));
	}
	sterfrac operator- (sterfrac s) const {
		return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) - double(s));
	}
	sterfrac operator* (double n) const {
		return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) * n);
	}
	double operator/ (sterfrac s) const {
		return (double(sterfrac(pounds, shillings, pences, eighths)) / double(s));
	}
	sterfrac operator/ (double n) const {
		return sterfrac(double(sterfrac(pounds, shillings, pences, eighths)) / n);
	}
};
int main() {
	setlocale(0, "");
	int zadanie;
	cout << "Введите номер задания - ";
	cin >> zadanie;
	if (zadanie == 4) {
		disk disk1;
		disk1.getDisk();
		disk1.putDisk();
	}
	else if (zadanie == 5) {
		employee0 e0;
		employee2 e1;
		e0.getdata();
		e1.getdata();
		e0.putdata();
		e1.putdata();
	}
	else if (zadanie == 6) {
		int niz, vverh;
		cout << "Введите нижнюю границу - ";
		cin >> niz;
		cout << "Введите вверхнюю границу - ";
		cin >> vverh;
		safegran arr(niz, vverh);
		for (int i = niz; i <= vverh; i++) {
			arr[i] = i * 10;
		}
		for (int i = niz; i <= vverh; i++) {
			int otvet=arr[i];
			cout << i << " - " << otvet << endl;
		}
	}
	else if (zadanie == 7) {
		CountDn c1;
		CountDn c2(100);
		cout << "\nc1=" << c1.get_count();
		cout << "\nc2=" << c2.get_count();
		++c1; ++c1; ++c1;
		cout << "\nc1=" << c1.get_count();
		--c2; --c2;
		cout << "\nc2=" << c2.get_count();
		CountDn c3 = --c2;
		cout << "\nc3=" << c3.get_count();
		cout << endl; 
		return 0;
	}
	else if (zadanie == 8) {
		
	}
	else if (zadanie = 9) {
		book b1;
		tape t1;
		b1.getBook();
		t1.getTape();
		b1.putBook();
		t1.putTape();
	}
	else if (zadanie = 10) {
		Executive exec;
		exec.getdata();
		exec.putdata();
		cout << endl;
	}
	else if (zadanie = 11) {
		Pair p1 = { 23, 56 },     // тестовые пары чисел
			p2 = { 8, 0 },
			p3 = { -34, 5 },
			p4 = { 1003, -345 };

		pairStack s1;             // стек
		s1.push(p1);              // помещаем в стек пары чисел
		s1.push(p2);
		s1.push(p3);
		// s1.push(p4);           // ошибка переполнения стека

		Pair p;
		p = s1.pop(); cout << p.x << ", " << p.y << endl;
		p = s1.pop(); cout << p.x << ", " << p.y << endl;
		p = s1.pop(); cout << p.x << ", " << p.y << endl;
	}
	else if (zadanie = 12) {
		sterfrac s1, s2, s;
		double n;
		cout << "1. "; s1.getSterling();
		cout << "2. "; s2.getSterling(); cout << endl;
		cout << "1. В десятичных фунтах: " << fixed << setprecision(2) << double(s1) << endl;
		cout << "2. В десятичных фунтах: " << fixed << setprecision(2) << double(s2) << endl << endl;
		s = s1 + s2;
		cout << "Результат сложения этих сумм: "; s.putSterling(); cout << endl;
		s = s1 - s2;
		cout << "Разность этих сумм: "; s.putSterling(); cout << endl;
		s = s1 * 1.05;
		cout << "Произведение первой суммы и числа 1,05: "; s.putSterling(); cout << endl;
		n = s1 / s2;
		cout << "Частное от деления первой суммы на вторую: " << n << endl;
		s = s1 / 3.5;
		cout << "Частное от деления первой суммы на число 3,5: "; s.putSterling(); cout << endl;
	}
}
