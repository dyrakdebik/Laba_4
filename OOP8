#include <iostream>
#include <iomanip> 
#include <cstring> 
#define _CRT_SECURE_NO_WARNINGS 1
using namespace std;
const int LEN = 80, LIMIT = 100;
/// ///////////////////////////////1,3,4 и триллион после ZADANIE/////////////////////////////
class publication {
protected:
	string title;
	float price;
public:
	void getPubl() {
		cout << "Введите тайтл - ";
		cin >> title;
		cout << "Введите прайс - ";
		cin >> price;
	}
	void putPubl() const {
		cout << endl << "Тайтл - " << title << endl << "Прайс - " << price;
	}
};
class publication2 : public publication {
protected:
	string data;
public:
	void getData() {
		getPubl();
		cout << "Введите дату выхода книги - ";
		cin >> data;
	}
	void putData() {
		putPubl();
		cout << "\nДата выхода книги - " << data;
	}
};
////////
class sales {
protected:
	enum { months = 3 };
	float salesArr[months];
public:
	void getSale();
	void putSale() const;
};
//----------------------
void sales::getSale() {
	cout << "Введите sales за 3 месяца\n";
	for (int j = 0; j < months; j++) {
		cout << "Месяц " << j + 1 << ": ";
		cin >> salesArr[j];
	}
}
//----------------------
void sales::putSale() const {
	for (int j = 0; j < months; j++) {
		cout << "\nПродажа за месяц " << j + 1 << ": ";
		cout << salesArr[j];
	}
}

/// ////////////////////////////
class book : public publication2, public sales {
protected:
	int pages;
public:
	void getBook() {
		publication2::getData();
		cout << "Введите кол-во страниц - ";
		cin >> pages;
		//sales::getSale();
	}
	void putBook() {
		publication2::putData();
		cout << "\nСтраницы - " << pages;
		//sales::putSale();
	}
};
////////
class tape : public publication2, public sales {
protected:
	float time;
public:
	void getTape() {
		publication2::getData();
		cout << "Введите время книги в минутах - ";
		cin >> time;
		//sales::getSale();
	}
	void putTape() {
		publication2::putData();
		cout << "\nВремя в минутах - " << time;
		//sales::putSale();
	}
};
class disk : public publication, public sales {
protected:
	enum diskk { CD, DVD };
	diskk tp;
public:
	void getDisk() {
		publication::getPubl();
		char dk;
		cout << "Выберите тип диска (c/d)";
		cin >> dk;
		switch (dk) {
		case 'c':
			tp = CD;
			break;
		case 'd':
			tp = DVD;
			break;
		default:
			cout << "Не бывает такого";
		}
		sales::getSale();
	}
	void putDisk() const {
		publication::putPubl();
		switch (tp) {
		case CD:
			cout << "\nТип диска - CD";
			break;
		case DVD:
			cout << "\nТип диска - DVD";
			break;
		}
		sales::putSale();
	}
};
/// ///////////////////////////////2/8 ZADANIE/////////////////////////////
class String {
protected:
	static const int SZ = 80;
	char str[SZ];
public:
	String() { str[0] = '\0'; }
	String(char s[]) {
		strcpy_s(str, s);
	}
	void display() const {
		cout << str;
	}
	operator char* () {
		return str;
	}
};
/////////
class Pstring : public String {
public:
	Pstring(char s[]);
};
///////
Pstring::Pstring(char s[]) {
	if (strlen(s) > SZ - 1) {
		for (int j = 0; j < SZ - 1; j++)
			str[j] = s[j];
		str[SZ - 1] = '\0';
	}
	else
		String(s);
}
///////
class Pstring2 : public Pstring {
public:
	string left(unsigned int amount)
	{
		string temp = "";
		for (int i = 0; i < amount; i++)
		{
			temp += str[i];
		}
		return temp;
	}
	string right(unsigned int amount)
	{
		string temp = "";
		int len = strlen(str);
		for (int i = len - amount; i < len; i++) {
			temp += str[i];
		}
		return temp;
	}
	string mid(unsigned int amount, unsigned int elementary)
	{
		string temp = "";
		for (int i = elementary - 1; i < elementary - 1 + amount; i++) {
			temp += str[i];
		}
		return temp;
	}
};
/// ///////////////////////////////5 ZADANIE/////////////////////////////
class employee0 {
private:
	char name[LEN];
	unsigned long number;
public:
	void getdata() {
		cout << "\nВведите имя: ";
		cin >> name;
		cout << "Введите номер: ";
		cin >> number;
	}
	void putdata() const {
		cout << "\nИмя: " << name;
		cout << "\nНомер: " << number;
	}
};
class employee2 : private employee0 {
private:
	double compensation;
	enum period { hour, mond, month };
	period opl;
public:
	void getdata() {
		char per;
		cout << "Введите компенсацию - ";
		cin >> compensation;
		cout << "Введите период - (h-почасовая, m - по понедельникам, e - ежемесячно)";
		cin >> per;
		switch (per) {
		case 'h':
			opl = hour;
			break;
		case 'm':
			opl = mond;
			break;
		case 'e':
			opl = month;
			break;
		default:
			cout << "Для кого я пишу буквы?";
			break;
		}
	}
	void putdata() {
		cout << "\nЗарплата - " << compensation << endl;
		cout << "Период оплаты - ";
		switch (opl) {
		case hour:
			cout << "Почасовая";
			break;
		case mond:
			cout << "Еженедельная";
			break;
		case month:
			cout << "Ежемесячная";
			break;
		}
	}

};
/// ///////////////////////////////6 ZADANIE/////////////////////////////
class safearay {
private:
	int arr[LIMIT];
public:
	int& operator[](int n) {
		if (n < 0 || n >= LIMIT) {
			cout << "\nIndex out of bounds";
			exit(1);
		}
		return arr[n];
	}
};
class safegran : public safearay {
private:
	int granniz, granvverh;
public:
	safegran(int niz, int vverh) : granniz(niz), granvverh(vverh) {
		if (granniz > granvverh) {
			if (granniz > granvverh) {
				cout << "Ошибка верхней и нижней границы ";
			}
			if (granvverh - granniz >= LIMIT)
				cout << "Ошибка. Слишком много элементов";
		}
	}
	int& operator[] (int n) {
		if (n < granniz || n > granvverh)
			cout << "Ошибка";
		return safearay::operator[] (n - granniz);
	}
};
/// ///////////////////////////////7 ZADANIE/////////////////////////////
class Counter {
protected:
	unsigned int count;
public:
	Counter() : count(0) {}
	Counter(int c) : count(c) {}
	unsigned int get_count() const {
		return count;
	}
	Counter operator ++ () {
		return Counter(++count); // prefix
	}
	Counter operator ++ (int) {
		return Counter(++count); // postfix
	}
};
/// ////-----------------------------------------------------------
class CountDn : public Counter
{
public:
	CountDn() : Counter() {}
	CountDn(int c) : Counter(c) {}
	CountDn operator -- () {
		return CountDn(--count);
	}
	CountDn operator -- (int) {
		return CountDn(--count);
	}
};

/// ///////////////////////////////10 ZADANIE/////////////////////////////
class student {
private:
	char school[LEN];
	char degree[LEN];
public:
	void getedu() {
		cout << "Введите название школы или университета: ";
		cin >> school;
		cout << "Введите самую высокую заработанную степень \n";
		cout << "(Highschool, Bachelor's, Master's, PhD): ";
		cin >> degree;
	}
	void putedu() const {
		cout << "\nШкола или университет: " << school;
		cout << "\nСамая высокая степень: " << degree;
	}
};
//////////////////////////////////////////////////////////////// 
class employee {
private:
	char name[LEN];
	unsigned long number;
public:
	void getEmpl() {
		cout << "\nВведите фамилию: ";
		cin >> name;
		cout << "\nВведите номер: ";
		cin >> number;
	}
	void putEmpl() const {
		cout << "\nФамилия: " << name;
		cout << "\nНомер: " << number;
	}
};
//////////////////////////////////////////////////////////////// 
class manager : private employee, private student {
private:
	char title[LEN]; //"vicepresident" etc. 
	double dues; //golf club dues 
public:
	void getManag() {
		employee::getEmpl();
		cout << "Введите название: ";
		cin >> title;
		cout << "Введите взносы в гольф-клуб: ";
		cin >> dues;
		student::getedu();
	}
	void putManag() const {
		employee::putEmpl();
		cout << "\nНазвание: " << title;
		cout << "\nВзносы в гольф клуб: " << dues;
		student::putedu();
	}
};
//---------
class executive : private manager {
protected:
	double prem, akcio;
public:
	void getExec() {
		manager::getManag();
		cout << "Введите размер премии - ";
		cin >> prem;
		cout << "Введите кол-во акций - ";
		cin >> akcio;
	}
	void putExec() {
		manager::putManag();
		cout << "\nПремия - " << prem << endl << "Количество акций - " << akcio;
	}
};
//////////////////////////////////////////////////////////////// 
class scientist : private employee, private student {
private:
	int pubs;
	//number of publications 
public:
	void getScien() {
		employee::getEmpl();
		cout << "Введите кол-во публикаций: ";
		cin >> pubs;
		student::getedu();

	}
	void putScien() const {
		employee::putEmpl();
		cout << "\nКоличество публикаций: " << pubs;
		student::putedu();
	}
};
class laborer : public employee //laborer 
{
};
/// ///////////////////////////////11 ZADANIE/////////////////////////////
struct Pair {
	int x, y;
};
class Stack {
protected:
	static const int max = 7;
	int st[max], top;
public:
	Stack() { top = -1; }
	void push(int var) {
		st[++top] = var;
	}
	int pop() {
		return st[top--];
	}
};
class Stack2 : public Stack {
public:
	void push(int var) {
		if (top >= max - 1)
			cout << "Стек полон";
		Stack::push(var);
	}
	int pop() {
		if (top < 0)
			cout << "Стек пуст";
		return Stack::pop();
	}
};
class pairStack : public Stack2 {
public:
	void push(Pair unit) {
		Stack::push(unit.x);
		Stack::push(unit.y);
	}
	Pair pop() {
		Pair temp;
		temp.y = Stack2::pop();
		temp.x = Stack2::pop();
		return temp;
	}
};

/// ///////////////////////////////12 ZADANIE/////////////////////////////
class sterling {
protected:
	int funt, shill, penny;
public:
	sterling() : funt(0), shill(0), penny(0) {}
	sterling(double d) {
		funt = d;
		shill = (d - funt) * 20;
		penny = round(((d - funt) * 20 - shill) * 12);
	}
	sterling(int f, int s, int p) : funt(f), shill(s), penny(p) {}
	void getSter() {
		char point;
		cout << "Введите сумму(1.1.1) - ";
		cin >> funt >> point >> shill >> point >> penny;
	}
	void putSter() const {
		char point = '.';
		cout << funt << point << shill << point << penny;
	}
	operator double() const {
		return (funt + shill / 20.0 + penny / 240.0);
	}
	sterling operator + (sterling s) const {
		return sterling(double(sterling(funt, shill, penny)) + double(s));
	}
	sterling operator - (sterling s) const {
		return sterling(double(sterling(funt, shill, penny)) - double(s));
	}
	sterling operator / (sterling s) const {
		return sterling(double(sterling(funt, shill, penny)) / double(s));
	}
	sterling operator * (sterling s) const {
		return sterling(double(sterling(funt, shill, penny)) * double(s));
	}
};
class sterfrac : public sterling {
private:
	int eighths;
public:
	sterfrac() : sterling(), eighths(0) {}
	sterfrac(double d) {
		funt = d;
		shill = (d - funt) * 20;
		penny = ((d - funt) * 20 - shill) * 12;
		eighths = round((((d - funt) * 20 - shill) * 12 - penny) * 8);
	}
	sterfrac(int f, int s, int p, int e) : sterling(f, s, p), eighths(e) {}
	void getSter() {
		int chisl, del;
		char point;
		cout << "Введите сумму(1.1.1-1/4) - ";
		cin >> funt >> point >> shill >> point >> penny >> point >> chisl >> point >> del;
		if (del == 2)
			chisl = chisl * 4;
		if (del == 4)
			chisl = chisl * 2;
		eighths = chisl;
	}
	void putSter() const {
		sterling::putSter();
		cout << " - ";
		switch (eighths) {
		case 2:
			cout << "1/4";
			break;
		case 4:
			cout << "1/2";
			break;
		case 6:
			cout << "3/4";
			break;
		default:
			cout << eighths << "/8";
		}
	}
	operator double() const {
		return (sterling::operator double() + eighths / 1920);
	}
	sterfrac operator + (sterfrac s) const {
		return sterfrac(double(sterfrac(funt, shill, penny, eighths)) + double(s));
	}
	sterfrac operator - (sterfrac s) const {
		return sterfrac(double(sterfrac(funt, shill, penny, eighths)) - double(s));
	}
	sterfrac operator / (sterfrac s) const {
		return sterfrac(double(sterfrac(funt, shill, penny, eighths)) / double(s));
	}
	sterfrac operator * (sterfrac s) const {
		return sterfrac(double(sterfrac(funt, shill, penny, eighths)) * double(s));
	}

};
/// ////////////////////////////////////////////////////////////////////////////
int main() {
	setlocale(0, "");
	int zadanie;
	cout << "Введите номер задания - ";
	cin >> zadanie;
	if (zadanie == 4) {
		disk disk1;
		disk1.getDisk();
		disk1.putDisk();
	}
	else if (zadanie == 5) {
		employee0 e0;
		employee2 e1;
		e0.getdata();
		e1.getdata();
		e0.putdata();
		e1.putdata();
	}
	else if (zadanie == 6) {
		int niz, vverh;
		cout << "Введите нижнюю границу - ";
		cin >> niz;
		cout << "Введите вверхнюю границу - ";
		cin >> vverh;
		safegran arr(niz, vverh);
		for (int i = niz; i <= vverh; i++) {
			arr[i] = i * 10;
		}
		for (int i = niz; i <= vverh; i++) {
			int otvet = arr[i];
			cout << i << " - " << otvet << endl;
		}
	}
	else if (zadanie == 7) {
		CountDn c1;
		CountDn c2(100);
		cout << "\nc1=" << c1.get_count();
		cout << "\nc2=" << c2.get_count();
		++c1; ++c1; ++c1;
		cout << "\nc1=" << c1.get_count();
		--c2; --c2;
		cout << "\nc2=" << c2.get_count();
		CountDn c3 = --c2;
		cout << "\nc3=" << c3.get_count();
		cout << endl;
		c2++; c2++;
		cout << "c2=" << c2.get_count() << endl;
		c1--; c1--;
		cout << "c1=" << c1.get_count();
		return 0;
	}
	else if (zadanie == 8) {

	}
	else if (zadanie == 9) {
		book b1;
		tape t1;
		b1.getBook();
		t1.getTape();
		b1.putBook();
		t1.putTape();
	}
	else if (zadanie == 10) {
		executive m1;
		scientist s1, s2;
		laborer l1;
		cout << endl;
		cout << "\nВведите данные для менеджера 1";
		m1.getExec();
		cout << "\nВведите данные для scientist 1";
		s1.getScien();
		cout << "\nВведите данные для scientist 2";
		s2.getScien();
		cout << "\nВведите данные для laborer 1";
		l1.getEmpl();
		cout << "\nДанные manager 1";
		m1.putExec();
		cout << "\nДанные scientist 1";
		s1.putScien();
		cout << "\nДанные scientist 2";
		s2.putScien();
		cout << "\nДанные laborer 1";
		l1.putEmpl();
		cout << endl;
	}
	else if (zadanie == 11) {
		Pair p1 = { 11,22 }, p2 = { 10,20 }, p3 = { 1,2 };
		pairStack s1;
		s1.push(p1);
		s1.push(p2);
		s1.push(p3);
		Pair temp;
		temp = s1.pop();
		cout << temp.x << "," << temp.y << endl;
		temp = s1.pop();
		cout << temp.x << "," << temp.y << endl;
		temp = s1.pop();
		cout << temp.x << "," << temp.y << endl;
	}
	else if (zadanie == 12) {
		sterfrac s1, s2, s;
		double n;
		cout << "1 - ";
		s1.getSter();
		cout << "2 - ";
		s2.getSter();
		cout << "1 - в десятичных фунтах: " << fixed << setprecision(2) << double(s1) << endl;
		cout << "2 - в десятичных фунтах: " << fixed << setprecision(2) << double(s2) << endl;
		cout << "1 - в десятичных фунтах: " << double(s1) << endl;
		s = s1 + s2;
		cout << "Сумма - ";
		s.putSter();
		s = s1 - s2;
		cout << endl << "Разность - ";
		s.putSter();
		s = s1 / s2;
		cout << endl << "Дереление - ";
		s.putSter();
		s = s1 * s2;
		cout << endl << "Умножение - ";
		s.putSter();
	}
}
