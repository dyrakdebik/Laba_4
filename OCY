#include <io.h>
#include <iostream>
#include <cctype>
#include <cstring>
#define _CRT_SECURE_NO_WARNINGS 1
using namespace std;
class stack {
private:
	int max_size;
	int* sArr;
	int top;
public:
	stack(int s) { // конструктор
		max_size = s;
		top = -1;
		sArr = new int[s];
	}
	~stack() {
		delete[] sArr;
	}
	void spush(int j) {
		if (top == max_size - 1)
			cout << "Стэк переполнен\n";
		else {
			top++;
			sArr[top] = j;
		}
	}
	int spop() {
		if (top >= 0) {
			int ans = sArr[top];
			top--;
			return ans;
		}
		else
			cout << "Стэк пуст\n";
	}
};
class queue {
private:
	int max_size;
	int *qArr; // одномерный массив для хранения элементов
	int first; // первый элемент
	int last; // последний элемент
	int current; // кол-во текущих элеменов
public:
	queue(int s) { // конструктор
		max_size = s;
		qArr = new int[max_size];
		first = 0;
		last = -1;
		current = 0;
	}
	void qpush(int j) {
		if (last == max_size - 1) { // если ласт элемент равен макс количеству - вставляем в начало очереди
			last = -1;
			current = 0;
		}
		qArr[++last] = j;
		current++;
	}
	int qpop() {
		int temp = qArr[first++];
		if (first == max_size)
			first = 0;
		current--;
		return temp;
	}
	int peekfront() {
		return qArr[first];
	}
	bool qempty() {
		return (current == 0); // true если очередь пуста
	}
	bool qfull() {
		return (current == max_size);
	}
	int size() {
		return current;
	}
	void qdisplay() {
		if (current == 0) {
			cout << "Очередь пуста\n";
			return;
		}
		if (first > last) {
			int j = first;
			while (j != max_size) {
				cout << qArr[j] << endl;
				j++;
			}
			j = 0;
			while (j < last) {
				cout << qArr[j] << endl;
				j++;
			}
		}
		else if (first < last) {
			for (int i = first; i <= last; i++)
				cout << i + 1 << ": " << qArr[i] << endl;
		}
		else if (current == 1)
			cout << "1: " << qArr[first];
		cout << endl;
		return;
	}
};

/// ////////////////////////////////////////////////////////////////////////////
int main() {
	setlocale(0, "");
	stack a;
	a.last = 0;
	pushS(a, 3);
	pushS(a, 6);
	pushS(a, 2);
	cout << popS(a) << " "; //Программа выведет 2
	cout << popS(a) << " "; //Программа выведет 2
	cout << popS(a) << " "; //Программа выведет 2
	cout << endl << endl;

	int choice = 1;
	int num;
	cout << "Введите кол-во элементов в очереди - ";
	cin >> num;
	queue queue1(num);
	cout << "1 - Вставить элемент\n2 - Удалить элемент из начала\n3 - Вывести очередь на экран\n4 - Выход\n";
	while (choice != 4) {
		cin >> choice;
		switch (choice) {
		case 1:
			cout << "Элемент: ";
			cin >> num;
			queue1.qpush(num);
			break;	
		case 2:
			queue1.qpop();
			break;
		case 3:
			queue1.qdisplay();
			break;
		}
	}
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
#include <io.h>
#include <iostream>
#include <cctype>
#include <cstring>
#define _CRT_SECURE_NO_WARNINGS 1
using namespace std;
const int MAX_SIZE = 10;
struct stack {
	int arr[MAX_SIZE];
	int last;
};
void pushS(stack& s, int x) { //добавление элемента
	if (s.last == MAX_SIZE) {
		cout << "Стэк переполнен"; // проверка
		return;
	}
	s.arr[s.last++] = x;
}
int popS(stack& s) {
	return s.arr[--s.last]; // возвращение элемента с вершины
}
bool emptyS(stack& s) {
	return (s.last == 0);
}
int sizeS(stack& s) {
	return (s.last);
}
class queue {
private:
	int max_size;
	int *qArr; // одномерный массив для хранения элементов
	int first; // первый элемент
	int last; // последний элемент
	int current; // кол-во текущих элеменов
public:
	queue(int s) { // конструктор
		max_size = s;
		qArr = new int[max_size];
		first = 0;
		last = -1;
		current = 0;
	}
	void qpush(int j) {
		if (last == max_size - 1) { // если ласт элемент равен макс количеству - вставляем в начало очереди
			last = -1;
			current = 0;
		}
		qArr[++last] = j;
		current++;
	}
	int qpop() {
		int temp = qArr[first++];
		if (first == max_size)
			first = 0;
		current--;
		return temp;
	}
	int peekfront() {
		return qArr[first];
	}
	bool qempty() {
		return (current == 0); // true если очередь пуста
	}
	bool qfull() {
		return (current == max_size);
	}
	int size() {
		return current;
	}
	void qdisplay() {
		if (current == 0) {
			cout << "Очередь пуста\n";
			return;
		}
		if (first > last) {
			int j = first;
			while (j != max_size) {
				cout << qArr[j] << endl;
				j++;
			}
			j = 0;
			while (j < last) {
				cout << qArr[j] << endl;
				j++;
			}
		}
		else if (first < last) {
			for (int i = first; i <= last; i++)
				cout << i + 1 << ": " << qArr[i] << endl;
		}
		else if (current == 1)
			cout << "1: " << qArr[first];
		cout << endl;
		return;
	}
};

/// ////////////////////////////////////////////////////////////////////////////
int main() {
	setlocale(0, "");
	stack a;
	a.last = 0;
	int elem, i = 0;
	char exit = 'a';
	while (exit != 's') {
		cout << "\nВведите элемент - ";
		cin >> elem;
		pushS(a, elem);
		i++;
		cout << "\nДля выхода введите s - ";
		cin >> exit;
	}
	while (i != 0) {
		cout << popS(a) << " "; //Программа выведет 2
		i--;
	}

	cout << endl << endl;

	int choice = 1;
	int num;
	cout << "Введите кол-во элементов в очереди - ";
	cin >> num;
	queue queue1(num);
	cout << "1 - Вставить элемент\n2 - Удалить элемент\n3 - Вывести очередь на экран\n4 - Выход\n";
	while (choice != 4) {
		cin >> choice;
		switch (choice) {
		case 1:
			cout << "Элемент: ";
			cin >> num;
			queue1.qpush(num);
			break;	
		case 2:
			queue1.qpop();
			break;
		case 3:
			queue1.qdisplay();
			break;
		}
	}

}
