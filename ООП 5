#include <iostream>
#include <conio.h>
#include <locale>
#include <math.h>
#define _CRT_SECURE_NO_WARNINGS 1
using namespace std;
class employee {
private:
	int nomer;
	float pocob;
public:
	void vvod() {
		cout << "Введите номер сотрудника - "; 
		cin >> nomer;
		cout << "Введите пособие - "; 
		cin >> pocob;
	}
	void vivod() {
		cout << "Номер сотрудникa - " << nomer << endl;
		cout << "Пособие сотрудника - " << pocob << endl;
	}
};
class date {
	unsigned int day, month, year;
	char slash = '/';
public:
	void vvodd() {
		cout << "Введите дату через слэш - ";
		cin >> day >> slash >> month >> slash >> year;
	}
	void vivodd() {
		cout << day << slash << month << slash << year << endl;
	}
};
enum dolj {
	laborer, 
	secretary, 
	manager, 
	accountant, 
	executive,
	researcher
};

class employee№6 {
private:
	int nomer;
	float pocob;
	dolj rab;
	date data;
public:
	void getemploy() {
		unsigned int day, month, year;
		char slash = '/', doljn;
		cout << "Введите номер сотрудника";
		cin >> nomer;
		cout << "Введите номер сотрудника";
		cin >> pocob;
		cout << " Введите дату приема сотрудника через слэш - ";
		cin >> month >> slash >> day >> slash >> year;
		data.vvodd();
		cout << "Введите первую букву должности (laborer, secretary, manager, accountant, executive, researcher) - ";
		cin >> doljn;
		switch (doljn)
		{
		case 'l':
			rab = dolj::laborer;
			break;
		case 's':
			rab = dolj::secretary;
			break;
		case 'm':
			rab = dolj::manager;
			break;
		case 'a':
			rab = dolj::accountant;
			break;
		case 'e':
			rab = dolj::executive;
			break;
		case 'r':
			rab = dolj::researcher;
			break;
		default:
			cout << "Неизвестная должность!";
			break;
		}
	}
	void putemploy() {
		cout << endl << "///////////////////////////   ИНФОРМАЦИЯ  //////////////////////";
		cout << endl << "Номер сотрудника - " << nomer;
		cout << endl << "Пособие сотрудника - " << pocob;
		cout << endl << "Дата приема на работу. ";
		data.vivodd();
		switch (rab) {
		case laborer:
			cout << " Полное название должности: laborer\n";
			break;
		case secretary:
			cout << " Полное название должности: secretary\n";
			break;
		case manager:
			cout << " Полное название должности: manager\n";
			break;
		case accountant:
			cout << " Полное название должности: accountant\n";
			break;
		case executive:
			cout << " Полное название должности: executive\n";
			break;
		case researcher:
			cout << " Полное название должности: researcher\n";
			break;
		default:
			cout << " Невозможно вывести полностью должность!\n";
			break;
		}
	}
};
	class angle {
		int gradys;
		float min;
		char naprav;
	public:
		angle() {}
		angle(int gradys1, float min1, char naprav1) : gradys(gradys1), min(min1), naprav(naprav1) {}
		void vvodkoor() {
			cout << "Введите градусы - ";
			cin >> gradys;
			cout << endl << "Введите минуты - ";
			cin >> gradys;
			cout << endl << "Введите направление - ";
			cin >> gradys;
		}
		void vivodkoor() {
			cout << gradys << '\xB0' << min << "\' " << naprav;
		}
	};
	/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void mainQ() {
		angle position1(1, 2, 'S'), position2(11, 23, 'W');
		char da;
		cout << "Координаты:\n";
		position1.vivodkoor(); cout << " ,"; position2.vivodkoor();
		do {
			cout << "\nШирота. ";
			position1.vvodkoor();
			cout << "Долгота. ";
			position2.vvodkoor();
			cout << "Ваши координаты:\n";
			cout << "широта: ";
			position1.vivodkoor();
			cout << ", долгота: ";
			position2.vivodkoor();
			cout << endl << "Продолжаем? (Y/N) ";
			cin >> da;
		} while (da != 'N');
	}
/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class PorydNomer {
private:
	int nomer;
	int static count;
public:
	PorydNomer() {
		count++;
		nomer = count;
	}
	void main() {
		cout << "Мой порядковый номер: " << nomer << endl;
	}
};
int PorydNomer::count = 0;

class fraction {
private:
	int chisl, znam;
	char slash = '/';
public:
	void vvoddrob() {
		cout << "Введите дробь - ";
		cin >> chisl >> slash >> znam;
	}
	void vivoddrob() {
		cout << chisl << slash << znam;
	}
	void sum(fraction f1, fraction f2) {
		chisl = f1.chisl * f2.znam + f2.chisl * f1.znam;
		znam = f1.znam * f2.znam;
	}
};
void mainsumdrob() { //main9
	char da;
	fraction f1, f2, f3;
	do {
		f1.vvoddrob();
		f2.vvoddrob();
		f3.sum(f1, f2);
		cout << "Сумма дробей: ";
		f3.vivoddrob();
		cout << endl;
		cout << "\nПродолжить? (y/n) ";
		cin >> da;
		cout << endl;
	} while (da != 'n');
}
class ship {
private:
	int nomer;
	static int count;
	angle position1;
	angle position2;
public:
	ship() {
		count++;
		nomer = count;
	}
	void vvodship() {
		cout << "Корабль № " << nomer << ". Введите его координаты:\n";
		cout << "Широта. ";
		position1.vvodkoor();
		cout << "Долгота. ";
		position2.vvodkoor();
		cout << endl;
	}
	void vivodship() {
		cout << "Корабль № " << nomer << ". Координаты его расположения:\n";
		cout << "широта: ";
		position1.vivodkoor();
		cout << ", долгота: ";
		position2.vivodkoor();
		cout << endl << endl;
	}
};
int ship::count = 0;
class fraction11 {
private:
	int num;
	int den;
public:
	fraction11() {}
	fraction11(int n, int d) : num(n), den(d) { }
	void get() {
		char slash;
		cout << "Введите дробь: ";
		cin >> num >> slash >> den;
	}
	void show() {
		cout << "Результат: " << num << '/' << den << endl;
	}
	void add(fraction11 f1, fraction11 f2) {
		num = f1.num * f2.den + f2.num * f1.den;
		den = f1.den * f2.den;
		lowterms();
	}
	void sub(fraction11 f1, fraction11 f2) {
		num = f1.num * f2.den - f2.num * f1.den;
		den = f1.den * f2.den;
		lowterms();
	}
	void mul(fraction11 f1, fraction11 f2) {
		num = f1.num * f2.num;
		den = f1.den * f2.den;
		lowterms();
	}
	void div(fraction11 f1, fraction11 f2) {
		num = f1.num * f2.den;
		den = f1.den * f2.num;
		lowterms();
	}
	void lowterms();
};
class fraction12 {
private:
	int num, den;
	public:
		fraction12() { }
		fraction12(int n, int d) : num(n), den(d) {
			lowterms();
		}
		void get() {
			char slash;
			cout << "Введите дробь: ";
			cin >> num >> slash >> den;
			lowterms();
		}
		void show(int width = 5) {
			int i = 1, tnum = num, tden = den;
			while (tnum) {
				tnum = tnum / 10; i++;
			}
			while (tden) {
				tden = tden / 10; i++;
			}
			cout << num << '/' << den;
			for (int j = 1; j <= (width- i); j++)
				cout << ' ';
		}
		void add(fraction12 f1, fraction12 f2) {
			num = f1.num * f2.den + f2.num * f1.den;
			den = f1.den * f2.den;
			lowterms();
		}
		void sub(fraction12 f1, fraction12 f2) {
			num = f1.num * f2.den - f2.num * f1.den;
			den = f1.den * f2.den;
			lowterms();
		}
		void mul(fraction12 f1, fraction12 f2) {
			num = f1.num * f2.num;
			den = f1.den * f2.den;
			lowterms();
		}
		void div(fraction12 f1, fraction12 f2) {
			num = f1.num * f2.den;
			den = f1.den * f2.num;
			lowterms();
		}
		void lowterms();
};
void fraction11::lowterms() {
	long tnum, tden, temp, gcd;
	tnum = labs(num);
	tden = labs(den);
	if (tden == 0) {
		cout << "Недопустимый знаменатель!";
		exit(1);
	}
	else if (tnum == 0) {
		num = 0; den = 1;
		return;
	}
	while (tnum != 0) {
		if (tnum < tden) {
			temp = tnum; tnum = tden; tden = temp;
		}
		tnum = tnum - tden;
	}
	gcd = tden;
	num = num / gcd;
	den = den / gcd;
}
void fraction12::lowterms() {
	long tnum, tden, temp, gcd;
	tnum = labs(num);
	tden = labs(den);
	if (tden == 0) {
		cout << "Недопустимый знаменатель!";
		exit(1);
	}
	else if (tnum == 0) {
		num = 0; den = 1;
		return;
	}
	while (tnum != 0) {
		if (tnum < tden) {
			temp = tnum; tnum = tden; tden = temp;
		}
		tnum = tnum - tden;
	}
	gcd = tden;
	num = num / gcd;
	den = den / gcd;
}
int main() {
	setlocale(0, "");
	int task;
	cout << "Введите задание(4- 12):";
	cin >> task;
	switch (task) {
	case 4:
		employee emp1, emp2, emp3;
		emp1.vvod();
		emp1.vivod();
		emp2.vvod();
		emp2.vivod();
		emp3.vvod();
		emp3.vivod();
		break
			;
	case 5:
		date dat;
		dat.vvodd();
		dat.vivodd();
		break
			;
	case 6:
		employee№6 emp21;
		emp21.getemploy();
		emp21.putemploy();
		break;
	case 7:
		mainQ();
		break;
	case 9:
		mainsumdrob();
		break;
	default:
		break;
	}
	if (task == 8) {
		PorydNomer obj1, obj2, obj3;
		obj1.main();
		obj2.main();
		obj3.main();
	}
	else if (task == 10) {
		ship s1, s2, s3;
		s1.vvodship();
		s2.vvodship();
		s3.vvodship();
		s1.vivodship();
		s2.vivodship();
		s3.vivodship();
	}
	else if (task == 11) {
		fraction11 fr1, fr2, fr3;
		char oper;
		char ch;
		do {
			fr1.get();
			cout << "Операция: ";
			cin >> oper;
			fr2.get();
			switch (oper) {
			case '+':
				fr3.add(fr1, fr2);
				fr3.show();
				break;
			case '-':
				fr3.sub(fr1, fr2);
				fr3.show();
				break;
			case '*':
				fr3.mul(fr1, fr2);
				fr3.show();
				break;
			case '/':
				fr3.div(fr1, fr2);
				fr3.show();
				break;
			default: cout << "Неизвестная операция" << endl;
			}
			cout << "Продолжить (y/n) ? "; cin >> ch;
		} while (ch != 'n');
	}
	else if (task == 12) {
		int den;
		cout << "Введите знаменатель дроби: ";
		cin >> den;
		cout << endl;
		int width1 = 1;
		int tnum = den - 1, tden = den;
		while (tnum) {
			tnum = tnum / 10; width1++;
		}
		while (tden) {
			tden = tden / 10; width1++;
		}
		int width2 = 1;
		tnum = den * den - 1, tden = den * den;
		while (tnum) {
			tnum = tnum / 10; width2++;
		}
		while (tden) {
			tden = tden / 10; width2++;
		}
		for (int i = 1; i <= width1; i++)
			cout << ' ';
		cout << " ";
		for (int num1 = 1; num1 < den; num1++) {
			fraction12 f1(num1, den);
			cout << ' ';
			f1.show(width2);
		}
		cout << endl;
		for (int i = 1; i <= (width1 + 2 + (width2 + 1) * (den - 1)); i
			++)
			cout << '-';
		cout << endl;
		for (int num1 = 1; num1 < den; num1++) {
			fraction12 f1(num1, den);
			f1.show(width1); cout << " |";
			for (int num2 = 1; num2 < den; num2++) {
				fraction12 f2(num2, den), f;
				f.mul(f1, f2);
				cout << ' '; f.show(width2);
			}
			cout << endl;
		}
	}
	return 0;
}
